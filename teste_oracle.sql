CREATE TABLE Cargo (
    cargo_funcionario VARCHAR2(50) PRIMARY KEY,
    salario NUMBER(10, 2)
);
/*
Cargo(cargo_funcionário*, salário)
		cargo_funcionário referencia Funcionário(cargo)
*/

CREATE TABLE Pessoa (
    cpf VARCHAR2(11) PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    numero VARCHAR2(11),
    rua VARCHAR2(100),
    bairro VARCHAR2(100),
    CONSTRAINT nome_check CHECK (REGEXP_LIKE(nome, '^[A-Za-zÀ-ÿ\~\´\^[:space:]]+$')),
    CONSTRAINT cpf_check CHECK (LENGTH(cpf) = 11 and REGEXP_LIKE(cpf, '^\d{11}$'))
);
/*
Pessoa(cpf, nome, número, rua, bairro)
*/


CREATE TABLE Tipo_quarto (
    tipo VARCHAR2(50) PRIMARY KEY,
    valor NUMBER(10, 2)
);
/*
Tipo_quarto(tipo*, valor)
tipo referencia Quarto(tipo_quarto)
*/  

CREATE TABLE Quarto (
    numero_quarto VARCHAR2(10) PRIMARY KEY,
    tipo_quarto VARCHAR2(50),
    CONSTRAINT fk_quarto_tipo FOREIGN KEY (tipo_quarto) REFERENCES Tipo_quarto(tipo)
);
/*
Quarto(numero quarto, tipo_quarto)
*/

CREATE TABLE Reserva (
    num_quarto VARCHAR2(10),
    periodo VARCHAR2(50),
    CONSTRAINT fk_reserva_quarto FOREIGN KEY (num_quarto) REFERENCES Quarto(numero_quarto),
    CONSTRAINT pk_reserva PRIMARY KEY (num_quarto, periodo)
);
/*
Reserva(num quarto*, periodo)
	num_quarto referencia Quarto(numero_quarto)
*/

CREATE TABLE Funcionario (
    cpf_p VARCHAR2(11) PRIMARY KEY,
    cargo VARCHAR2(50),
    data_contratacao DATE,
    cpf_orientador VARCHAR2(11),
    CONSTRAINT fk_funcionario_pessoa FOREIGN KEY (cpf_p) REFERENCES Pessoa(cpf),
    CONSTRAINT fk_funcionario_orientador FOREIGN KEY (cpf_orientador) REFERENCES Funcionario(cpf_p)
);
/*
Funcionário(cpf_p*, cargo, data_contratação, cpf_orientador*)
    cpf_p referencia Pessoa(cpf)
    cpf_orientador referencia Funcionário(cpf_p)
*/

CREATE TABLE Pagamento (
    id_pagamento NUMBER GENERATED BY DEFAULT AS IDENTITY 
        START WITH 1 
        INCREMENT BY 1 
        PRIMARY KEY,
    num_quarto VARCHAR2(10),
    periodo VARCHAR2(50),
    tipo_pagamento VARCHAR2(50),
    valor NUMBER(10, 2),
    data DATE,
    CONSTRAINT fk_pagamento_reserva FOREIGN KEY (num_quarto, periodo) REFERENCES Reserva(num_quarto, periodo)
);
/*
Pagamento(id pagamento, num_quarto*, período*,  tipo pagamento, valor, data)
	num_quarto, periodo referenciam Reserva(num_quarto, periodo)
*/


CREATE TABLE Fazer_Manutencao (
    cpf_funcionario VARCHAR2(11),
    numero_quarto VARCHAR2(10),
    CONSTRAINT fk_manutencao_funcionario FOREIGN KEY (cpf_funcionario) REFERENCES Funcionario(cpf_p),
    CONSTRAINT fk_manutencao_quarto FOREIGN KEY (numero_quarto) REFERENCES Quarto(numero_quarto),
    CONSTRAINT pk_manutencao PRIMARY KEY (cpf_funcionario, numero_quarto)
);
/*
Fazer Manutencao(cpf_funcionario*, numero_quarto*)
	cpf_funcionario referencia Funcionario(cpf_p)
	numero_quarto referencia Quarto(numero_quarto)
*/

CREATE TABLE Hospede (
    cpf_p VARCHAR2(11) PRIMARY KEY,
    CONSTRAINT fk_hospede_pessoa FOREIGN KEY (cpf_p) REFERENCES Pessoa(cpf)
);
/*
Hóspede (cpf_p*)
	cpf_p referencia Pessoa(cpf)
*/

CREATE TABLE Multa (
    id_multa NUMBER GENERATED BY DEFAULT AS IDENTITY 
        START WITH 1 
        INCREMENT BY 1 
        PRIMARY KEY,
    id_pagamento NUMBER,
    num_quarto VARCHAR2(10),
    periodo VARCHAR2(50),
    tipo VARCHAR2(50),
    valor NUMBER(10, 2),
    CONSTRAINT fk_multa_pagamento FOREIGN KEY (id_pagamento) REFERENCES Pagamento(id_pagamento),
    CONSTRAINT fk_multa_reserva FOREIGN KEY (num_quarto, periodo) REFERENCES Reserva(num_quarto, periodo)
);
/*
Multa(id multa, id_pagamento*, num_quarto*, periodo*,  tipo, valor)
    id_pagamento referencia Pagamento(id_pagamento)
	num_quarto, periodo referenciam Reserva(num_quarto, periodo)
*/

CREATE TABLE Realiza (
    num_quarto_reserva VARCHAR2(10),
    periodo_reserva VARCHAR2(50),
    hospede VARCHAR2(11),
    funcionario VARCHAR2(11),
    data_check_in DATE,
    data_check_out DATE,
    CONSTRAINT fk_realiza_reserva FOREIGN KEY (num_quarto_reserva, periodo_reserva) REFERENCES Reserva(num_quarto, periodo),
    CONSTRAINT fk_realiza_hospede FOREIGN KEY (hospede) REFERENCES Hospede(cpf_p),
    CONSTRAINT fk_realiza_funcionario FOREIGN KEY (funcionario) REFERENCES Funcionario(cpf_p),
    CONSTRAINT pk_realiza PRIMARY KEY (num_quarto_reserva, periodo_reserva, hospede, funcionario)
);
/*
Realiza(num quarto reserva*, periodo reserva*, hospede*, funcionario*, data_check_in, data_check_out)
    hospede referencia Hospede(cpf_p)
	num_quarto_reserva, periodo_reserva referenciam Reserva(num_quarto, periodo)
    uncionario referencia Funcionario(cpf_p)
*/

CREATE TABLE Telefone (
    cpf_p VARCHAR2(11),
    numero VARCHAR2(15),
    CONSTRAINT fk_telefone_pessoa FOREIGN KEY (cpf_p) REFERENCES Pessoa(cpf),
    CONSTRAINT pk_telefone PRIMARY KEY (cpf_p, numero)
);
/*
Telefone(cpf_p*, numero);
	cpf_p referencia Pessoa(cpf)
*/

-- Inserindo Pessoas
INSERT INTO Pessoa (cpf, nome, numero, rua, bairro) VALUES ('12345678901', 'João Silva', '101', 'Rua A', 'Centro');
INSERT INTO Pessoa (cpf, nome, numero, rua, bairro) VALUES ('23456789012', 'Maria Oliveira', '202', 'Rua B', 'Jardins');
INSERT INTO Pessoa (cpf, nome, numero, rua, bairro) VALUES ('34567890123', 'Carlos Souza', '303', 'Rua C', 'Vila Nova');

-- Inserindo Funcionários
INSERT INTO Funcionario (cpf_p, cargo, data_contratacao, cpf_orientador) VALUES ('12345678901', 'Gerente', TO_DATE('2022-01-15', 'YYYY-MM-DD'), NULL);
INSERT INTO Funcionario (cpf_p, cargo, data_contratacao, cpf_orientador) VALUES ('23456789012', 'Recepcionista', TO_DATE('2023-03-20', 'YYYY-MM-DD'), '12345678901');

-- Inserindo Hóspedes
INSERT INTO Hospede (cpf_p) VALUES ('34567890123');

-- Inserindo Tipos de Quarto
INSERT INTO Tipo_quarto (tipo, valor) VALUES ('Standard', 100.00);
INSERT INTO Tipo_quarto (tipo, valor) VALUES ('Luxo', 250.00);

-- Inserindo Quartos
INSERT INTO Quarto (numero_quarto, tipo_quarto) VALUES ('101', 'Standard');
INSERT INTO Quarto (numero_quarto, tipo_quarto) VALUES ('102', 'Luxo');

-- Inserindo Reservas
INSERT INTO Reserva (num_quarto, periodo) VALUES ('101', '2024-02-01 a 2024-02-07');
INSERT INTO Reserva (num_quarto, periodo) VALUES ('102', '2024-03-10 a 2024-03-15');

-- Inserindo Realizações de Reserva
INSERT INTO Realiza (num_quarto_reserva, periodo_reserva, hospede, funcionario, data_check_in, data_check_out) 
VALUES ('101', '2024-02-01 a 2024-02-07', '34567890123', '23456789012', TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-02-07', 'YYYY-MM-DD'));

-- Inserindo Pagamentos
INSERT INTO Pagamento (num_quarto, periodo, tipo_pagamento, valor, data) 
VALUES ('101', '2024-02-01 a 2024-02-07', 'Cartão', 700.00, TO_DATE('2024-02-01', 'YYYY-MM-DD'));
INSERT INTO Pagamento (num_quarto, periodo, tipo_pagamento, valor, data) 
VALUES ('101', '2024-02-01 a 2024-02-07', 'Cartão', 700.00, TO_DATE('2024-02-01', 'YYYY-MM-DD'));
INSERT INTO Pagamento (num_quarto, periodo, tipo_pagamento, valor, data) 
VALUES ('101', '2024-02-01 a 2024-02-07', 'Cartão', 900.00, TO_DATE('2024-02-01', 'YYYY-MM-DD'));

-- Inserindo Multas
INSERT INTO Multa (id_pagamento, num_quarto, periodo, tipo, valor) 
VALUES (1, '101', '2024-02-01 a 2024-02-07', 'Atraso Check-out', 50.00);
INSERT INTO Multa (id_pagamento, num_quarto, periodo, tipo, valor) 
VALUES (1, '101', '2024-02-01 a 2024-02-07', 'Atraso Check-out', 50.00);
INSERT INTO Multa (id_pagamento, num_quarto, periodo, tipo, valor) 
VALUES (2, '101', '2024-02-01 a 2024-02-07', 'Atraso Check-out', 150.00);

-- Inserindo Telefones
INSERT INTO Telefone (cpf_p, numero) VALUES ('12345678901', '11987654321');
INSERT INTO Telefone (cpf_p, numero) VALUES ('23456789012', '11912345678');
INSERT INTO Telefone (cpf_p, numero) VALUES ('34567890123', '11955556666');

-- Selecionando dados de cada tabela
SELECT * FROM Pessoa;
SELECT * FROM Funcionario;
SELECT * FROM Hospede;
SELECT * FROM Tipo_quarto;
SELECT * FROM Quarto;
SELECT * FROM Reserva;
SELECT * FROM Realiza;
SELECT * FROM Pagamento;
SELECT * FROM Multa;
SELECT * FROM Telefone;


--ALTER TABLE
--CREATE INDEX
--INSERT INTO

--UPDATE
update funcionario set cargo = 'Camareira' where cpf_p =23456789012;

--DELETE
SELECT * FROM multa;
DELETE FROM multa WHERE id_multa = 3;

--SELECT-FROM-WHERE

-- Seleciona as tuplas (id_multa, num_quarto) das reservas em que houve multa do tipo 'Atraso Check-out'.

SELECT M.id_multa AS id_multa, M.num_quarto AS num_quarto
FROM Multa M
WHERE M.tipo = 'Atraso Check-out';

--BETWEEN
--IN
--LIKE
--IS NULL ou IS NOT NULL
--INNER JOIN
--MAX
--MIN
--AVG
--COUNT
--LEFT ou RIGHT ou FULL OUTER JOIN 

--SUBCONSULTA COM OPERADOR RELACIONAL
SELECT * FROM tipo_quarto where valor < 200;

--SUBCONSULTA COM IN
--SUBCONSULTA COM ANY
--SUBCONSULTA COM ALL
--ORDER BY

-- Seleciona as tuplas (cargo, salario) em ordem decrescente de valor de salário

SELECT C.cargo_funcionario AS cargo, C.salario AS salario
FROM Cargo C
ORDER BY salario DESC;

--GROUP BY

-- Seleciona cada tipo de pagamento e associa à quantidade de pagamentos daquele tipo feitos até o momento

SELECT tipo_pagamento, COUNT(*) AS total_pagamentos
FROM Pagamento
GROUP BY tipo_pagamento;

--HAVING

-- Seleciona os CPF's dos hóspedes que já visitaram o hotel e realizaram um gasto histórico maior que 2000.00

SELECT H.cpf_p AS cpf, SUM(P.valor) AS total_gasto
FROM Hospede H
INNER JOIN Realiza R ON R.hospede = H.cpf_p
INNER JOIN Pagamento P ON P.num_quarto = R.num_quarto_reserva
GROUP BY H.cpf_p
HAVING SUM(P.valor) > 2000.00;

--UNION ou INTERSECT ou MINUS
SELECT cpf FROM Pessoa
MINUS
SELECT cpf_p FROM Funcionario;

--CREATE VIEW
CREATE VIEW Gerentes AS
SELECT cpf_p
FROM Funcionario
WHERE cargo = 'Gerente';

select * from Gerentes;

--GRANT / REVOKE*
--USO DE RECORD
--USO DE ESTRUTURA DE DADOS DO TIPO TABLE
--BLOCO ANÔNIMO
--CREATE PROCEDURE
--CREATE FUNCTION
--%TYPE
--%ROWTYPE
--IF ELSIF
--CASE WHEN
--LOOP EXIT WHEN
--WHILE LOOP
--FOR IN LOOP

--SELECT … INTO
DECLARE
    v_numero varchar(11);
    v_rua VARCHAR(100);
    v_bairro VARCHAR(100);
BEGIN
    SELECT numero, rua, bairro INTO v_numero, v_rua, v_bairro
    FROM Pessoa
    WHERE cpf = '12345678901';
    
    DBMS_OUTPUT.PUT_LINE('Endereço: ' || v_rua || ', ' || v_numero || ' - ' || v_bairro);
END;
/

--CURSOR (OPEN, FETCH e CLOSE)
DECLARE
    CURSOR pessoa_cursor IS SELECT cpf, nome, numero, rua, bairro FROM Pessoa;
    pessoa_record Pessoa%ROWTYPE;
BEGIN
    OPEN pessoa_cursor;
    LOOP
        FETCH pessoa_cursor INTO pessoa_record;
        EXIT WHEN pessoa_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('CPF: ' || pessoa_record.cpf || ', Nome: ' || pessoa_record.nome);
    END LOOP;
    CLOSE pessoa_cursor;
END;
/

--EXCEPTION WHEN

--USO DE PARÂMETROS (IN, OUT ou IN OUT)
CREATE OR REPLACE PROCEDURE preco_diarias (
    valor_quarto IN NUMBER,
    qtd IN OUT NUMBER,
    total OUT NUMBER
) AS
BEGIN
    total := valor_quarto * qtd;
END;
/

DECLARE
    valor_quarto NUMBER := 150;
    qtd NUMBER := 3;
    total NUMBER;
BEGIN
    preco_diarias(valor_quarto, qtd, total);
    DBMS_OUTPUT.PUT_LINE('O total para ' ||qtd || ' diarias é ' || total);
END;
/

--CREATE OR REPLACE PACKAGE
CREATE OR REPLACE PACKAGE util IS
    PROCEDURE listar_pessoas;
END util;
/

-- CREATE OR REPLACE PACKAGE BODY
CREATE OR REPLACE PACKAGE BODY util IS
    PROCEDURE listar_pessoas IS
        CURSOR pessoa_cursor IS SELECT cpf, nome, numero, rua, bairro FROM Pessoa;
        pessoa_record Pessoa%ROWTYPE;
    BEGIN
        OPEN pessoa_cursor;
        LOOP
            FETCH pessoa_cursor INTO pessoa_record;
            EXIT WHEN pessoa_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('CPF: ' || pessoa_record.cpf || ', Nome: ' || pessoa_record.nome);
        END LOOP;
        CLOSE pessoa_cursor;
    END listar_pessoas;
END util;

BEGIN
    util.listar_pessoas;
END;

--CREATE OR REPLACE TRIGGER (COMANDO)

--CREATE OR REPLACE TRIGGER (LINHA)
CREATE OR REPLACE TRIGGER trg_before_update_funcionario
BEFORE UPDATE ON Funcionario
FOR EACH ROW
BEGIN
    IF :NEW.cargo != :OLD.cargo THEN
        DBMS_OUTPUT.PUT_LINE('Cargo alterado de ' || :OLD.cargo || ' para ' || :NEW.cargo);
    END IF;
END;
/


